'use strict';

import * as _ from 'lodash';
import * as validator from  'validator';

import * as adapters from 'lib/adapters';
import * as JSONAPISerializer from 'jsonapi-serializer';

// TODO Modify
interface ISerializerOptions {

}

// TODO Modify
interface IAdapterOptions {
  includeRelations?: boolean;
  query?: any; // TODO Verify
  pagination?: {
    offset: number;
    limit: number;
    total?: number;
  };
}

export default class OhMyJSONAPI {

  private adapter: Adapter;
  private baseUrl: string;
  private serializerOptions: ISerializerOptions;

  /**
   * Constructor that initializes a new instance of ohMyJSONAPI
   * with the desired adapter. If no adapter is passed
   * @param  {[type]} adapterName [description]
   * @param baseUrl
   * @param serializerOptions
   * @return {[type]}         [description]
   */
  // TODO better argument types
  constructor(adapterName: string, baseUrl: string, serializerOptions: ISerializerOptions) {

    // Lookup and set the adapter if it exists
    let adapter: Adapter = _lookupAdapter(adapterName);

    this.adapter = adapter;

    // Trim and set the baseUrl, if it exists.
    this.baseUrl = validator.isURL(baseUrl) ? _.trimRight(baseUrl, '/') : '';

    // Set default serializer options.
    this.serializerOptions = serializerOptions;
  }

  /**
   * Provides access to a new instance of the raw serializer. For more information
   * on options, please see https://github.com/SeyZ/jsonapi-serializer.
   * @param type
   * @param data
   * @param options
   */
  // TODO better argument types
  static serializer(type, data, options): JSONAPISerializer {
    return new JSONAPISerializer(type, data, options); // TODO Comment
  }

  /**
   * Serializes the data using the specified adapter.
   * @param  {[type]} data this will
   * @param  {[type]} type [description]
   * @param options
   * @return {[type]}      [description]
   */
  // TODO better argument types
  toJSONAPI(data: any, type: string, options: IAdapterOptions): any {
    if (!data) { throw new Error('toJSONAPI(): `data` is required.'); }
    if (!type) { throw new Error('toJSONAPI(): `type` is required.'); }

    // Use adapter serializer or raw serializer depending if it was set
    if (this.adapter) {
      return this.adapter(data, type, this.baseUrl, this.serializerOptions, options);
    } else {
      return OhMyJSONAPI.serializer(type, data, this.serializerOptions);
    }
  }
}

/**
 * Looks up and returns the specified Adapter.
 * @param adapterName
 * @private
 */
function _lookupAdapter(adapterName: string): Adapter {
  let adapter = adapters[adapterName];
  if (!adapter) {
    throw new Error('Invalid adapter. Please choose from [bookshelf]');
  }
  return adapter;
}
